<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 静态资源访问处理 这种方法就是利用容器的default servlet来处理先 -->
    <mvc:default-servlet-handler/>

    <!-- 定义无需Controller的url<->view直接映射 -->
    <!--<mvc:view-controller path="/" view-name="login" />-->

    <!--<context:component-scan base-package="com.smile.azxx" />-->
    <!-- 自动扫描且只扫描@Controller -->
    <context:component-scan base-package="com" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!-- 启动注解驱动的spring MVC功能,注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageCOnverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>

    <!-- 对模型视图名称的解析,在请求时模型视图名称添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/pages/"/>      <!-- 前缀 -->
        <property name="suffix" value=".jsp"/>   <!-- 后缀 -->
    </bean>

    <!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">WEB-INF/views/error/403</prop>
                <prop key="java.lang.Throwable">WEB-INF/views/error/500</prop>
            </props>
        </property>
    </bean>

    <!-- spring文件上传配置 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the max upload size100MB -->
        <property name="maxUploadSize">
            <value>1048576000</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
    </bean>

    <!-- Jpa 事务配置 -->
    <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
    <!--<property name="entityManagerFactory" ref="entityManagerFactory"/>-->
    <!--</bean>-->


    <!--这里是对静态资源的映射-->
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <mvc:resources mapping="/js/**" location="/resources/js/"/>
    <mvc:resources mapping="/css/**" location="/static/css/"/>
    <mvc:resources mapping="/img/**" location="/data/codeImg/"/>

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- shiro为集成springMvc 拦截异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 这里你可以根据需要定义N多个错误异常转发 -->
                <prop key="org.apache.shiro.authz.UnauthorizedException">/pages/login.jsp</prop>
                <prop key="org.apache.shiro.authz.AuthorizationException">/pages/login.jsp</prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">/pages/login.jsp</prop>
                <prop key="java.lang.IllegalArgumentException">/WEB-INF/views/error/404.jsp</prop>
                <prop key="java.lang.Exception">/WEB-INF/views/error/404.jsp</prop>
            </props>
        </property>
    </bean>
</beans>